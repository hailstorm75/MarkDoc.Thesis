
@book{gary_mclean_hall_adaptive_2017,
	address = {Redmond, Washington},
	edition = {Second edition},
	series = {Best practices},
	title = {Adaptive code: agile coding with design patterns and {SOLID} principles},
	isbn = {978-1-5093-0258-1},
	shorttitle = {Adaptive code},
	abstract = {Write code that can adapt to changes. By applying this book's principles, you can create code that accommodates new requirements and unforeseen scenarios without significant rewrites. Gary McLean Hall describes Agile best practices, principles, and patterns for designing and writing code that can evolve more quickly and easily, with fewer errors, because it doesn't impede change. Now revised, updated, and expanded, Adaptive Code, Second Edition adds indispensable practical insights on Kanban, dependency inversion, and creating reusable abstractions. Drawing on over a decade of Agile consulting and development experience, McLean Hall has updated his best-seller with deeper coverage of unit testing, refactoring, pure dependency injection, and more. Master powerful new ways to: Write code that enables and complements Scrum, Kanban, or any other Agile framework; Develop code that can survive major changes in requirements; Plan for adaptability by using dependencies, layering, interfaces, and design patterns; Perform unit testing and refactoring in tandem, gaining more value from both; Use the "golden master" technique to make legacy code adaptive; Build SOLID code with single-responsibility, open/closed, and Liskov substitution principles; Create smaller interfaces to support more-diverse client and architectural needs; Leverage dependency injection best practices to improve code adaptability; Apply dependency inversion with the Stairway pattern, and avoid related anti-patterns. This book is for programmers of all skill levels seeking more-practical insight into design patterns, SOLID principles, unit testing, refactoring, and related topics. Most readers will have programmed in C\#, Java, C++, or similar object-oriented languages, and will be familiar with core procedural programming techniques. -- Provided by publisher},
	publisher = {Microsoft Press},
	author = {{Gary McLean Hall}},
	year = {2017},
	note = {OCLC: ocn964820736},
	keywords = {Agile software development, User interfaces (Computer systems)},
	annote = {Includes index},
	annote = {Introduction to Scrum -- Introduction to Kanban -- Dependencies and layering -- Interfaces and design patterns -- Testing -- Refactoring -- The single responsibility principle -- The ope/closed principle -- The Liskov substitution principle -- Interface segregation -- Dependency inversion -- Dependency injection -- Coupling, cohesion, and connascence},
}

@misc{bill_wagner_xml_nodate,
	title = {{XML} documentation comments},
	url = {https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/},
	abstract = {Learn about XML documentation comments. You can create documentation for your code by including XML elements in special comment fields. You can use other tools to build documentation layouts from comments.},
	language = {en-us},
	urldate = {2022-02-24},
	journal = {XML documentation comments - document APIs using /// comments},
	author = {{Bill Wagner}},
	file = {Snapshot:C\:\\Users\\Denis\\Zotero\\storage\\TKPPH3E4\\xmldoc.html:text/html},
}

@misc{bill_wagner_recommended_nodate,
	title = {Recommended {XML} documentation tags for a class and its members},
	url = {https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/recommended-tags},
	abstract = {This article provides the syntax and definitions for recommended tags for XML documentation.},
	language = {en-us},
	urldate = {2022-02-24},
	author = {{Bill Wagner}},
	file = {Snapshot:C\:\\Users\\Denis\\Zotero\\storage\\JNXATLS3\\recommended-tags.html:text/html},
}

@misc{bill_wagner_example_nodate,
	title = {Example {XML} documentation comments},
	url = {https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/examples},
	abstract = {See documentation examples on many different C\# language elements. Learn which tags to use in different situations and for different language elements.},
	language = {en-us},
	urldate = {2022-02-24},
	author = {{Bill Wagner}},
}

@misc{richard_carr_adding_nodate,
	title = {Adding {Lists} and {Tables} to {XML} {Documentation}},
	url = {http://blackwasp.co.uk/documentationlists.aspx},
	urldate = {2022-02-24},
	author = {{Richard Carr}},
}

@misc{richard_carr_adding_nodate-1,
	title = {Adding {Lists} and {Tables} to {XML} {Documentation} ({Page} 2 of 2)},
	url = {http://blackwasp.co.uk/documentationlists_2.aspx},
	urldate = {2022-02-24},
	author = {{Richard Carr}},
}

@misc{noauthor_avalonia_nodate,
	title = {Avalonia documentation},
	url = {https://docs.avaloniaui.net/},
	urldate = {2022-02-24},
	journal = {Welcome},
	file = {Snapshot:C\:\\Users\\Denis\\Zotero\\storage\\UAAIYNVZ\\docs.avaloniaui.net.html:text/html},
}

@misc{noauthor_avaloniabehaviors_nodate,
	title = {{AvaloniaBehaviors} {Wiki}},
	url = {https://github.com/wieslawsoltes/AvaloniaBehaviors},
	abstract = {Port of Windows UWP Xaml Behaviors for Avalonia Xaml. - Home · wieslawsoltes/AvaloniaBehaviors Wiki},
	language = {en},
	urldate = {2022-02-24},
	journal = {Home · wieslawsoltes/AvaloniaBehaviors Wiki},
}

@misc{noauthor_autofac_nodate,
	title = {Autofac documentation},
	url = {https://docs.autofac.org/en/latest/},
	urldate = {2022-02-24},
	journal = {Welcome to Autofac’s documentation! — Autofac 6.0.0 documentation},
	file = {Welcome to Autofac’s documentation! — Autofac 6.0.0 documentation:C\:\\Users\\Denis\\Zotero\\storage\\YYMLU6B3\\latest.html:text/html},
}

@book{deursen_dependency_2019,
	address = {Shelter Island, NY},
	edition = {Revised and expanded edition},
	title = {Dependency {Injection}: principles, practices, and patterns},
	isbn = {978-1-61729-473-0},
	shorttitle = {Dependency {Injection}},
	abstract = {"Dependency Injection (DI) is a great way to reduce tight coupling between software components. Instead of hard-coding dependencies, such as specifying a database driver, you make those connections through a third party. Central to application frameworks like ASP.NET Core, DI enables you to better manage changes and other complexity in your software. "Dependency injection: principles, practices, patterns" is a revised and expanded edition of the bestselling classic "Dependency Injection in .NET". It teaches you DI from the ground up, featuring relevant examples, patterns, and anti-patterns for creating loosely coupled, well-structured applications. The well-annotated code and diagrams use C\# examples to illustrate principles that work flawlessly with modern object-oriented languages and DI libraries."--Provided by publisher},
	publisher = {Manning Publications},
	author = {Deursen, Steven Van and Seemann, Mark},
	year = {2019},
	note = {OCLC: on1082890435},
	keywords = {Microsoft .NET Framework, Object-oriented programming (Computer science)},
	annote = {Originally published: as Dependency Injection in .NET. 2011 Edition statement from back cover},
	annote = {Part 1. Putting dependency injection on the map. The basics of dependency injection: what, why, and how -- Writing tightly coupled code -- Writing loosely coupled code -- Part 2. Catalog. DI patterns -- DI anti-patterns -- Code smells -- Part 3. Pure DI. Application composition -- Object lifetime -- Interception -- Aspect-oriented programming by design -- Tool-based aspect-oriented programming -- Part 4. DI containers. DI container introduction -- The autofac DI container -- The simple injector DI container -- The Microsoft.Extensions.DependencyInjection DI container},
}

@book{mclean_hall_adaptive_2014,
	address = {Redmond, Washington},
	title = {Adaptive code via c\#: {Agile} coding with design patterns and solid principles},
	isbn = {978-0-7356-8320-4},
	shorttitle = {Adaptive code via c\#},
	publisher = {Microsoft Press},
	author = {McLean Hall, Gary},
	year = {2014},
	keywords = {Agile software development},
	annote = {Minimal Level Cataloging Plus},
}

@misc{noauthor_mermaid_nodate,
	title = {Mermaid documentation},
	url = {https://mermaid-js.github.io/mermaid/#/},
	urldate = {2022-02-24},
	journal = {mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.},
	file = {mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.:C\:\\Users\\Denis\\Zotero\\storage\\NGGZFPTT\\mermaid.html:text/html},
}

@misc{noauthor_reactiveui_nodate,
	title = {{ReactiveUI} documentation},
	url = {http://reactiveui.net/docs},
	language = {en},
	urldate = {2022-02-24},
	journal = {Documentation},
	file = {Snapshot:C\:\\Users\\Denis\\Zotero\\storage\\L4TF2VYF\\docs.html:text/html},
}

@misc{roland_pheasant_reactivemarblesdynamicdata_2022,
	title = {reactivemarbles/{DynamicData}},
	copyright = {MIT},
	url = {https://github.com/reactivemarbles/DynamicData},
	abstract = {Reactive collections based on Rx.Net},
	urldate = {2022-02-24},
	publisher = {Reactive Marbles},
	author = {{Roland Pheasant}},
	month = feb,
	year = {2022},
	note = {original-date: 2014-11-21T08:15:58Z},
}

@misc{ram_n_java_plugin_2013,
	title = {Plugin {Design} {Pattern}},
	url = {https://www.youtube.com/watch?v=m2gUqyYJd_4},
	abstract = {Java Source Code here:   http://ramj2ee.blogspot.com/2013/08/p...

Plugin Design Pattern Overview
JavaEE Tutorials and Sample code - Click here : http://ramj2ee.blogspot.com/

Keyword
design pattern,
design patterns in java,
design patterns c\#,
singleton design pattern,
factory design pattern,
microservices design patterns,
patterns in java,
facade design pattern,
singleton design pattern c\#,
factory design pattern in java,
singleton design pattern in java,
factory pattern,
head first design patterns,
singleton pattern,
builder design pattern,
adapter design pattern,
abstract factory design pattern,
python design patterns,
javascript design patterns,
c++ design patterns,
memento design,
builder pattern,
strategy design pattern,
java singleton,
decorator design pattern,
factory design pattern c\#,
abstract design pattern,
observer pattern,
decorator pattern,
software design patterns,
observer design pattern,
builder pattern java,
factory pattern java,
creational design patterns,
types of design patterns,
builder design pattern in java,
facade pattern,
adapter pattern,
gang of four design patterns,
mvc design pattern,
factory pattern c\#,
prototype design pattern,
chain of responsibility design pattern,
architectural patterns,
structural design patterns,
behavioral design patterns,
composite design pattern,
bridge design pattern,
cqrs design pattern,
flyweight design pattern,
singleton pattern java,
singleton pattern c\#,
php design patterns,
android design patterns,
ui patterns,
c\# singleton,
command design pattern,
gof design patterns,
proxy design pattern,
design patterns in software engineering,
mvc patterns,
refactoring guru,
command pattern,
abstract factory pattern,
state design pattern,
memento design pattern,
javascript patterns,
design patterns in microservices,
spring design patterns,
adapter design pattern in java,
abstract factory design pattern c\#,
java design patterns with examples,
design patterns in node js,
visitor pattern,
bridge pattern,
decorator pattern java,
mvvm design pattern,
microservices architecture patterns,
repository design pattern c\#,
factory design pattern c++,
strategy design pattern java,
facade design pattern in java,
swift design patterns,
singleton design pattern c++,
composite pattern,
proxy pattern,
software architecture patterns,
visitor design pattern,
react design patterns,
observer pattern java,
mediator design pattern,
iterator design pattern,
adapter pattern java,
ios design patterns,
mobile design patterns,
abstract factory design pattern in java,
observer design pattern java,
decorator design pattern in java,
hexagon design pattern,
prototype design pattern in java,
mediator pattern,
abstract factory,
ui design patterns,
oop design patterns,
facade design pattern c\#,
types of design patterns in java,
proxy design pattern in java,
microservices design patterns in java,
chain of responsibility,
state pattern,
flyweight pattern,
gof patterns,
iterator pattern,
prototype pattern,
javascript singleton,
command pattern java,
java decorator,
design patterns examples,
angular design patterns,
js design patterns,
solid design pattern,
creational patterns,
spring boot design patterns,
j2ee design patterns,
singleton design pattern example,
design patterns javatpoint,
architectural patterns in software engineering,
observer design pattern c++,
design patterns in java with realtime examples,
design patterns in angular,
tutorialspoint design patterns,
salesforce design patterns,
design patterns in ooad,
singleton design,
simple design patterns,
python singleton,
chain of responsibility pattern,
repository design pattern,
mediator pattern c\#,
builder pattern c\#,
api design patterns,
java singleton example,
facade pattern java,
dependency injection design pattern,
interpreter design pattern,
singleton object,
proxy pattern java,
builder design pattern c\#,
architectural design patterns,
adapter design pattern c\#,
mvc design pattern in java,
different design patterns,
design patterns c\# with real time examples,
singleton design pattern in java with realtime example,
saga design pattern microservices,
pattern in compiler design,
command design pattern java,
javatpoint design pattern,
creational design patterns in java,
decorator pattern c\#,
visitor pattern java,
observer pattern c\#,
mvp design pattern,
dao design pattern,
atomic design pattern,
adapter pattern c\#,
singleton example,
c\# patterns,
refactoring guru design patterns,
abstract factory pattern c\#,
object pool design pattern,
chain of responsibility design pattern java,
bridge pattern java,
java builder pattern example,
patterns and designs,
gang of four design patterns java,
structural design patterns in java,
state design pattern java,
design patterns used in spring,
design patterns in spring boot,
switchboard design pattern,
software architecture and design patterns,
thread design patterns,
design patterns in cpp,
memento pattern,
programming design patterns,},
	urldate = {2022-02-24},
	author = {{Ram N Java}},
	year = {2013},
}

@misc{cochran_introduction_nodate,
	title = {Introduction to {Building} a {Plug}-{In} {Architecture} {Using} {C}\#},
	url = {https://www.c-sharpcorner.com/article/introduction-to-building-a-plug-in-architecture-using-c-sharp/},
	abstract = {In this article we'll take another look at how we can use the state pattern to build a plug-in architecture that will allow us to change the behavior of our application by placing differnt plug-ins into a folder.},
	urldate = {2022-02-24},
	author = {Cochran, Matthew},
	file = {Snapshot:C\:\\Users\\Denis\\Zotero\\storage\\NWQBUKY5\\introduction-to-building-a-plug-in-architecture-using-C-Sharp.html:text/html},
}
